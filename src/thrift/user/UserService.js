//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require("thrift");
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var ttypes = require("./user_types");
//HELPER FUNCTIONS AND STRUCTURES

var UserService_ping_args = function (args) {};
UserService_ping_args.prototype = {};
UserService_ping_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_ping_args.prototype.write = function (output) {
  output.writeStructBegin("UserService_ping_args");
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_ping_result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PingResponse(args.success);
    }
  }
};
UserService_ping_result.prototype = {};
UserService_ping_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.PingResponse();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_ping_result.prototype.write = function (output) {
  output.writeStructBegin("UserService_ping_result");
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin("success", Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserServiceClient = (exports.Client = function (output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
});
UserServiceClient.prototype = {};
UserServiceClient.prototype.seqid = function () {
  return this._seqid;
};
UserServiceClient.prototype.new_seqid = function () {
  return (this._seqid += 1);
};

UserServiceClient.prototype.ping = function (callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

UserServiceClient.prototype.send_ping = function () {
  var output = new this.pClass(this.output);
  var args = new UserService_ping_args();
  try {
    output.writeMessageBegin("ping", Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === "function") {
      output.reset();
    }
    throw e;
  }
};

UserServiceClient.prototype.recv_ping = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback("ping failed: unknown result");
};
var UserServiceProcessor = (exports.Processor = function (handler) {
  this._handler = handler;
});
UserServiceProcessor.prototype.process = function (input, output) {
  var r = input.readMessageBegin();
  if (this["process_" + r.fname]) {
    return this["process_" + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(
      Thrift.TApplicationExceptionType.UNKNOWN_METHOD,
      "Unknown function " + r.fname
    );
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
UserServiceProcessor.prototype.process_ping = function (seqid, input, output) {
  var args = new UserService_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping.bind(this._handler))
      .then(function (result) {
        var result_obj = new UserService_ping_result({ success: result });
        output.writeMessageBegin("ping1", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      })
      .catch(function (err) {
        var result;
        result = new Thrift.TApplicationException(
          Thrift.TApplicationExceptionType.UNKNOWN,
          err.message
        );
        output.writeMessageBegin("ping1", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ping(function (err, result) {
      var result_obj;
      if (err === null || typeof err === "undefined") {
        result_obj = new UserService_ping_result(
          err !== null || typeof err === "undefined" ? err : { success: result }
        );
        output.writeMessageBegin("ping1", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(
          Thrift.TApplicationExceptionType.UNKNOWN,
          err.message
        );
        output.writeMessageBegin("ping1", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
