//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

var thrift = require("thrift");
var Thrift = thrift.Thrift;

if (typeof Int64 === "undefined" && typeof require === "function") {
  var Int64 = require("node-int64");
}

TGeoLocationException = function (args) {
  this.id = null;
  this.message = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(TGeoLocationException, Thrift.TException);
TGeoLocationException.prototype.name = "TGeoLocationException";
TGeoLocationException.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.id = input.readI32().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGeoLocationException.prototype.write = function (output) {
  output.writeStructBegin("TGeoLocationException");
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin("id", Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin("message", Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TGeoCoordinate = function (args) {
  this.vin = null;
  this.dongleId = null;
  this.lat = null;
  this.lng = null;
  this.hdop = null;
  this.precision = null;
  this.heading = null;
  this.altitude = null;
  this.speed = null;
  this.source = null;
  this.info = null;
  this.time = null;
  if (args) {
    if (args.vin !== undefined && args.vin !== null) {
      this.vin = args.vin;
    }
    if (args.dongleId !== undefined && args.dongleId !== null) {
      this.dongleId = args.dongleId;
    }
    if (args.lat !== undefined && args.lat !== null) {
      this.lat = args.lat;
    }
    if (args.lng !== undefined && args.lng !== null) {
      this.lng = args.lng;
    }
    if (args.hdop !== undefined && args.hdop !== null) {
      this.hdop = args.hdop;
    }
    if (args.precision !== undefined && args.precision !== null) {
      this.precision = args.precision;
    }
    if (args.heading !== undefined && args.heading !== null) {
      this.heading = args.heading;
    }
    if (args.altitude !== undefined && args.altitude !== null) {
      this.altitude = args.altitude;
    }
    if (args.speed !== undefined && args.speed !== null) {
      this.speed = args.speed;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = args.info;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
  }
};
TGeoCoordinate.prototype = {};
TGeoCoordinate.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.vin = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.dongleId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.DOUBLE) {
          this.lat = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.DOUBLE) {
          this.lng = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 5:
        if (ftype == Thrift.Type.DOUBLE) {
          this.hdop = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 6:
        if (ftype == Thrift.Type.DOUBLE) {
          this.precision = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 7:
        if (ftype == Thrift.Type.DOUBLE) {
          this.heading = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 8:
        if (ftype == Thrift.Type.DOUBLE) {
          this.altitude = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 9:
        if (ftype == Thrift.Type.DOUBLE) {
          this.speed = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 10:
        if (ftype == Thrift.Type.DOUBLE) {
          this.source = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 11:
        if (ftype == Thrift.Type.DOUBLE) {
          this.info = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 12:
        if (ftype == Thrift.Type.I64) {
          this.time = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGeoCoordinate.prototype.write = function (output) {
  output.writeStructBegin("TGeoCoordinate");
  if (this.vin !== null && this.vin !== undefined) {
    output.writeFieldBegin("vin", Thrift.Type.STRING, 1);
    output.writeString(this.vin);
    output.writeFieldEnd();
  }
  if (this.dongleId !== null && this.dongleId !== undefined) {
    output.writeFieldBegin("dongleId", Thrift.Type.STRING, 2);
    output.writeString(this.dongleId);
    output.writeFieldEnd();
  }
  if (this.lat !== null && this.lat !== undefined) {
    output.writeFieldBegin("lat", Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.lat);
    output.writeFieldEnd();
  }
  if (this.lng !== null && this.lng !== undefined) {
    output.writeFieldBegin("lng", Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.lng);
    output.writeFieldEnd();
  }
  if (this.hdop !== null && this.hdop !== undefined) {
    output.writeFieldBegin("hdop", Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.hdop);
    output.writeFieldEnd();
  }
  if (this.precision !== null && this.precision !== undefined) {
    output.writeFieldBegin("precision", Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.precision);
    output.writeFieldEnd();
  }
  if (this.heading !== null && this.heading !== undefined) {
    output.writeFieldBegin("heading", Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.heading);
    output.writeFieldEnd();
  }
  if (this.altitude !== null && this.altitude !== undefined) {
    output.writeFieldBegin("altitude", Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.altitude);
    output.writeFieldEnd();
  }
  if (this.speed !== null && this.speed !== undefined) {
    output.writeFieldBegin("speed", Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.speed);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin("source", Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.source);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin("info", Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.info);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin("time", Thrift.Type.I64, 12);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};
