//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

"use strict";

var thrift = require("thrift");
var Thrift = thrift.Thrift;
var Q = thrift.Q;

// var ttypes = require("./user_types");

if (typeof Int64 === "undefined" && typeof require === "function") {
  var Int64 = require("node-int64");
}

var TGeoLocationService_getLastGeoLocation_args = function (args) {
  this.vin = null;
  this.dongleId = null;
  if (args) {
    if (args.vin !== undefined && args.vin !== null) {
      this.vin = args.vin;
    }
    if (args.dongleId !== undefined && args.dongleId !== null) {
      this.dongleId = args.dongleId;
    }
  }
};

TGeoLocationService_getLastGeoLocation_args.prototype = {};
TGeoLocationService_getLastGeoLocation_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.vin = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.dongleId = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGeoLocationService_getLastGeoLocation_args.prototype.write = function (
  output
) {
  output.writeStructBegin("TGeoLocationService_getLastGeoLocation_args");
  if (this.vin !== null && this.vin !== undefined) {
    output.writeFieldBegin("vin", Thrift.Type.STRING, 1);
    output.writeString(this.vin);
    output.writeFieldEnd();
  }
  if (this.dongleId !== null && this.dongleId !== undefined) {
    output.writeFieldBegin("dongleId", Thrift.Type.STRING, 2);
    output.writeString(this.dongleId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGeoLocationService_getLastGeoLocation_result = function (args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TGeoCoordinate(args.success);
    }
  }
};
TGeoLocationService_getLastGeoLocation_result.prototype = {};
TGeoLocationService_getLastGeoLocation_result.prototype.read = function (
  input
) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new TGeoCoordinate();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TGeoLocationService_getLastGeoLocation_result.prototype.write = function (
  output
) {
  output.writeStructBegin("TGeoLocationService_getLastGeoLocation_result");
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin("success", Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TGeoLocationServiceClient = function (input, output) {
  this.input = input;
  this.output = !output ? input : output;
  this.seqid = 0;
};
TGeoLocationServiceClient.prototype = {};

TGeoLocationServiceClient.prototype.getLastGeoLocation = function (
  vin,
  dongleId,
  callback
) {
  this.send_getLastGeoLocation(vin, dongleId, callback);
  if (!callback) {
    return this.recv_getLastGeoLocation();
  }
};

TGeoLocationServiceClient.prototype.send_getLastGeoLocation = function (
  vin,
  dongleId,
  callback
) {
  var params = {
    vin: vin,
    dongleId: dongleId,
  };
  var args = new TGeoLocationService_getLastGeoLocation_args(params);
  try {
    this.output.writeMessageBegin(
      "getLastGeoLocation",
      Thrift.MessageType.CALL,
      this.seqid
    );
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function () {
        var result = null;
        try {
          result = self.recv_getLastGeoLocation();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  } catch (e) {
    if (typeof this.output.getTransport().reset === "function") {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

TGeoLocationServiceClient.prototype.recv_getLastGeoLocation = function () {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TGeoLocationService_getLastGeoLocation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw "getLastGeoLocation failed: unknown result";
};
